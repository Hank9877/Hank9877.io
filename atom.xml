<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hank9877的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-12T10:13:35.006Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hank</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态规划算法</title>
    <link href="http://yoursite.com/2020/07/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/07/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95/</id>
    <published>2020-07-12T09:57:43.279Z</published>
    <updated>2020-07-12T10:13:35.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h1><h2 id="动态规划步骤"><a href="#动态规划步骤" class="headerlink" title="动态规划步骤"></a>动态规划步骤</h2><p>1.确定公式自变量，确定函数值的含义</p><p>2.明确公式</p><p>3.代码编写</p><p>（1）考虑特殊情况</p><p>（2）加入缓存</p><p>（3）将公式代码化</p><p>（4）存储缓存（缓存一般为键值对，缓存自变量，值存相应的函数值）</p><h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><p>来看看生活中经常遇到的事情,假设大家都是土豪,身上带了足够的钞票,现在中华人民共和国的钞票有如下几个面值 1、5、10、20、50、100。</p><p>现在你的目标是用尽量少的钞票,凑出某个金额 M。</p><p>我们现在需要凑足的钱是 M=15。 </p><p>如果我们取面值为 11 的钞票,那么接下来需要凑足M=15-11=4。</p><p>如果我们取面值为 5 的钞票,那么接下来需要凑足M=15-5=10。 </p><p>如果我们取面值为 1 的钞票,那么接下来需要凑足M=15-1=14。</p><p><img src= "/img/loading.gif" data-src="E:%5Cgitdownloads%5CHank9877.github.io%5Cimages%5C2-10.png" alt=""></p><p>这给了我们一个至关重要的提示</p><p><code>f(M)</code> 只与 <code>f(M-11)</code>，<code>f(M-5)</code>，<code>f(M-1)</code>有关。</p><p>更能确切的说,是取他们之间的最小的值。</p><p><img src= "/img/loading.gif" data-src="E:%5Cgitdownloads%5CHank9877.github.io%5Cimages%5C2-2.svg" alt=""></p><h4 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h4><p>为了避免重复求解，可以对求解结果进行缓存，下次可以直接使用。使用HashMap。</p><p><strong>该案例的代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 寻找最少的钞票数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="comment">// #1 处理边界情况</span></span><br><span class="line"><span class="keyword">if</span> (m &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #2 加入缓存</span></span><br><span class="line"><span class="keyword">if</span>(map.containsKey(m))&#123;</span><br><span class="line">  <span class="keyword">return</span> map.get(m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取 1 和 5 的最小超票数</span></span><br><span class="line"><span class="keyword">int</span> min = Math.min(f(m - <span class="number">1</span>), f(m - <span class="number">5</span>));</span><br><span class="line"><span class="comment">// 取 1 、5、11</span></span><br><span class="line">min = Math.min(min, f(m - <span class="number">11</span>));</span><br><span class="line"><span class="comment">// #3 存储缓存</span></span><br><span class="line">map.put(m, min + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> min + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"15的最少钞票数："</span> + f(<span class="number">15</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><p>背包问题</p><p>假设我们有一个背包可以容纳10KG的物品,现在有 5 个物品,重量分别为2、2、6、5、4,他们的价值分别是6、3、5、4、6。每个物品只有一件,也就是要么取要么不取。</p><p><img src= "/img/loading.gif" data-src="E:%5Cgitdownloads%5CHank9877.github.io%5Cimages%5C3-2.svg" alt=""></p><p>请问,怎么装背包,才能带走更多的财富? 这个问题其实也是一种求解最优解的情况。看到最优解的解决方案,我们自然而然想到了动态规划。</p><p><strong>思考</strong></p><p>那这个问题应该怎么思考呢?通过之前的学习,我们知道动态规划的核心需要找到<strong>父问题和子问题的关系</strong>。</p><p>假设我们将f(w)表示在w 重量的背包下,获取到的最大价值。那么应该怎么化繁为简? </p><p>如果取第一个物品,f(w) = 6 + f(w-2) 其中 6 是第一个物品的价值,f(w-2)表示放置了第一个物品之后的最优解。 </p><p>如果取第二个物品,f(w) = 3 + f(w-2) </p><p>如果取第三个物品,f(w) = 5 + f(w-6) </p><p>如果取第四个物品,f(w) = 4 + f(w-5)</p><p>如果取第五个物品,f(w) = 6 + f(w-4) </p><p>而我们需要取的是上述 5 种情况的最大值,也就是公式如下:</p><p><img src= "/img/loading.gif" data-src="E:%5Cgitdownloads%5CHank9877.github.io%5Cimages%5C3-4.svg" alt=""></p><h4 id="代码优化-唯一性"><a href="#代码优化-唯一性" class="headerlink" title="代码优化-唯一性"></a>代码优化-唯一性</h4><p>1.只有未使用的物品才能被取出 </p><p>2.物品取出后,将物品状态进行修改</p><p><strong>该案例的代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="comment">// 缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 最找背包最优装法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span>[][] objects)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 当重量小于或者等于0的时候，返回0</span></span><br><span class="line"><span class="keyword">if</span> (w &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">String key = w + <span class="string">"-"</span> + Arrays.toString(objects);</span><br><span class="line"><span class="comment">// 优先从缓存中获取</span></span><br><span class="line"><span class="keyword">if</span> (hashMap.containsKey(key)) &#123;</span><br><span class="line"><span class="keyword">return</span> hashMap.get(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 化简为子问题</span></span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span>[] object = objects[i];</span><br><span class="line"><span class="keyword">int</span> weight = object[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> money = object[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> canGet = object[<span class="number">2</span>];</span><br><span class="line"><span class="comment">// #2. 如果已经被获取，则跳过</span></span><br><span class="line"><span class="keyword">if</span> (canGet == <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #1.只有空间足够放才往下面进行</span></span><br><span class="line"><span class="keyword">if</span> (w &gt;= weight) &#123;</span><br><span class="line">  <span class="comment">// #3. 在取用之间进行设置，取用之后进行恢复</span></span><br><span class="line">  object[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">max = Math.max(max, f(w - weight, objects) + money);</span><br><span class="line">object[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">hashMap.put(key, max);</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] objects = &#123;</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">6</span>, <span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(<span class="string">"10kg的背包最多财富："</span> + f(<span class="number">10</span>, objects));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h2><p>楼梯问题</p><p>有一个高度是 10 级的台阶,从下往上走,每跨一步只能向上 1 级或者 2 级台阶。求出一共有多少种走法？</p><p>倒着分析问题，我们可以这样想，假设我们现在还有最后一步要走，可能的情况有哪些？</p><p>1.我们站在第9级上，一步1级后到达顶端；</p><p>2.我们站在第8级上，一步2级后到达顶端；</p><p>所以，最后一步可以走1级或者2级，不外乎两种情况。</p><p>再假设，已知从0级到9级的走法有M种，从0级到8级的走法有N种，那么思考一下，从0到10级的走法和M、N有什么关系呢？从0到10级的走法一共是多少种呢？答案是M+N。</p><p>也就是说，用F(n)来表示从0级到n级的走法，可得出</p><p>F(9)=M；</p><p>F(8)=N；</p><p>F(10)=M+N；</p><p>F(10)=F(9)+F(8);</p><p>如果已知从0到9级的走法和从0到8级的走法，问题就有答案了，那从0级到9级的走法有多少种呢？</p><p>我们依然这样想，还有一步就到9级，可能的情况有两种，从8到9和从7到9，已知了从0级到8级的走法有N种，如果再知道从0到7的走法有P种，那么从0到9级的走法就是N+P，那么可得出</p><p>F(8)=N；</p><p>F(7)=P；</p><p>F(9)=N+P；</p><p>F(9)=F(8)+F(7);</p><p>把一个复杂的问题，逐步简化成简单的问题，我们继续推断，当只剩下2级台阶和1级台阶时的走法分别是2和1。不难归纳出：</p><p>F(1)=1;</p><p>F(2)=2;</p><p>F(n)=F(n-1)+F(n-2);(n&gt;=3)</p><p>这是一个递归，有了公式和递归结束条件，就可以写出程序了。</p><p><strong>该案例的代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Integer, Integer&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 爬楼梯总数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> stepNum)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 没有楼梯</span></span><br><span class="line"><span class="keyword">if</span> (stepNum &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 楼梯为1阶v</span></span><br><span class="line"><span class="keyword">if</span> (stepNum == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 楼梯为2阶</span></span><br><span class="line"><span class="keyword">if</span> (stepNum == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cache.containsKey(stepNum)) &#123;</span><br><span class="line"><span class="keyword">return</span> cache.get(stepNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum = f(stepNum - <span class="number">1</span>) + f(stepNum - <span class="number">2</span>);</span><br><span class="line">cache.put(stepNum, sum);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"10级楼梯最多走法："</span> + f(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例四"><a href="#案例四" class="headerlink" title="案例四"></a>案例四</h2><p>偷钱</p><p>现在你是一个专业的小偷,计划偷窃沿街的房屋。每个房间里都有一定的现金,影响你偷窃的唯一制约是两个相邻的房间装有互相连同通的防盗系统,也就是如果两个相邻的房间在同一晚上被小偷盗窃,系统会自动报警。</p><p>请在<strong>不触动警报装置</strong>的情况下,盗窃到最高金额的现金。</p><p><strong>思路</strong></p><p>可以从右边考虑，简化问题</p><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,7,9,3,1]</span><br><span class="line">输出: 12</span><br><span class="line">解释: 偷窃 1 号房屋 (金额 &#x3D; 2), 偷窃 3 号房屋 (金额 &#x3D; 9)，接着偷窃 5 号房屋 (金额 &#x3D; 1)。</span><br><span class="line">     偷窃到的最高金额 &#x3D; 2 + 9 + 1 &#x3D; 12 。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="E:%5Cgitdownloads%5CHank9877.github.io%5Cimages%5C6-1.png" alt=""></p><p>根据上述图解，可得到以下公式：</p><p><strong>f(5)=Max(f(4)+f(3)+money)</strong></p><p><strong>该案例代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Integer, Integer&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 一夜之间获取的最高现金</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>[] rooms)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 每次调用的时候，将cache情况</span></span><br><span class="line">cache.clear();</span><br><span class="line"><span class="keyword">return</span> fCore(rooms, rooms.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fCore</span><span class="params">(<span class="keyword">int</span>[] rooms, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 处理边界情况</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> rooms[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cache.containsKey(index)) &#123;</span><br><span class="line"><span class="keyword">return</span> cache.get(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后一个房间偷或者不偷两种情况。</span></span><br><span class="line"><span class="keyword">int</span> max = Math.max(fCore(rooms, index - <span class="number">1</span>), fCore(rooms, index - <span class="number">2</span>) + rooms[index]);</span><br><span class="line">cache.put(index, max);</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] rooms1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">"&#123;1,2,3,1&#125;"</span> + f(rooms1));</span><br><span class="line"><span class="keyword">int</span>[] rooms2 = &#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">"&#123;2,7,9,3,1&#125;"</span> + f(rooms2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.倒着来分析问题</p><p>2.简化问题</p><p>3.找到公式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态规划算法&quot;&gt;&lt;a href=&quot;#动态规划算法&quot; class=&quot;headerlink&quot; title=&quot;动态规划算法&quot;&gt;&lt;/a&gt;动态规划算法&lt;/h1&gt;&lt;h2 id=&quot;动态规划步骤&quot;&gt;&lt;a href=&quot;#动态规划步骤&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>创建博客整理</title>
    <link href="http://yoursite.com/2020/07/09/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2020/07/09/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%B4%E7%90%86/</id>
    <published>2020-07-09T08:53:19.418Z</published>
    <updated>2020-07-08T12:20:20.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h1><h3 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h3><p>hexo是一个快速、简洁且高效的博客框架,它支持几条简短的命令发布博客,因此是对于初学者比较友好的博客框架。</p><h2 id="虚拟机部署博客"><a href="#虚拟机部署博客" class="headerlink" title="虚拟机部署博客"></a>虚拟机部署博客</h2><p>1.创建博客文件夹：hexo init blog</p><p>2.安装发布工具：进入blog目录，打开terminal，输入：npm install hexo-deployer-git –save</p><p>3.修改配置文件：打开_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">theme: landscape</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line"></span><br><span class="line">  type: git</span><br><span class="line"></span><br><span class="line">  repository: 你的GitHub仓库地址   注意使用git开头的ssh地址</span><br><span class="line"></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>4.Hexo提交：三部曲—&gt;hexo clean-&gt;hexo generate(hexo g)-&gt;hexo deploy(hexo d)</p><h2 id="本地电脑部署博客"><a href="#本地电脑部署博客" class="headerlink" title="本地电脑部署博客"></a>本地电脑部署博客</h2><h4 id="windows环境"><a href="#windows环境" class="headerlink" title="windows环境"></a>windows环境</h4><p>1.本地安装git：淘宝git for镜像（<a href="https://npm.taobao.org/mirrors/git-for-windows/）" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/git-for-windows/）</a></p><p>2.本地安装 Node.js：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>3.本地配置SSH并绑定到GitHub：</p><p>先使用 cat ~/.ssh/id_rsa.pub 来查看是否生成了ssh<br>没有生成的话使用 ssh-keygen -t rsa -b 4096 -C “<a href="mailto:your_email@example.com">your_email@example.com</a>“ 来进行生成<br>按三次回车完成生成，在使用 cat ~/.ssh/id_rsa.pub 进行获取</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200708200808953.png" alt=""></p><p>然后绑定到github去</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200708200923554.png" alt=""></p><p>4.本地安装Hexo：安装过完nodejs后开始安装</p><p>npm install -g hexo-cli</p><p>5.打开git bash 创建一个用来git clone的文件夹，使用 git clone -b dev 仓库地址 来Gitclone到本地，然后cd进入clone的仓库目录安装发布工具：npm install hexo-deployer-git –save</p><p>再安装node依赖，输入：npm install</p><h2 id="博客发布三部曲："><a href="#博客发布三部曲：" class="headerlink" title="博客发布三部曲："></a>博客发布三部曲：</h2><p>hexo clean：清除缓存，能够让新发布的博客更快速生效</p><p>hexo generate：生成新的静态文件，可以简写为hexo g</p><p>hexo deploy：把生成的文件部署到我们的博客上，可以简写为hexo d</p><p>创建新博客内容命令:hexo new xxx (xxx为新内容主题名，会创建一个xxx.md的文件)</p><h4 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h4><p>1.博客主页使用Hexo的主题显示不准确：</p><p>![](C:\Users\Administrator\Documents\Tencent Files\565756014\FileRecv\MobileFile\mmexport1594209966979.jpg)</p><p>修改仓库名称：用户名.github.io</p><p>2.本地git clone时碰到问题：</p><p>![](C:\Users\Administrator\Documents\Tencent Files\565756014\FileRecv\MobileFile\mmexport1594209858644.jpg)</p><p>在Are you sure you want to continue connecting那一步输入yes</p><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><p>md文件的部分操作</p><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><p>使用#，可以表示1-6级标题</p><p>比如二级标题：##这是一个二级标题</p><h5 id="加粗体-加斜体"><a href="#加粗体-加斜体" class="headerlink" title="加粗体/加斜体"></a>加粗体/加斜体</h5><p><strong>加粗部分</strong>    ** xxxxxx没有空格**</p><p><em>加斜部分</em>     * xxxx没有空格 *</p><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><p><img src= "/img/loading.gif" data-src="%E5%9B%BE%E7%89%87%E7%9A%84url" alt=""></p><p>例如</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5CAdministrator%5CPictures%5Cnull-a53d13e850d3deb.jpg" alt=""></p><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><p>无序列表：</p><p>*1</p><p>*2</p><p>*3</p><p>有序列表：</p><p>1.哈哈</p><p>1.哈哈哈</p><p>1.哈哈哈哈</p><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><p><code>行内代码</code>     ``</p><figure class="highlight plain"><figcaption><span>``````</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### Hexo更换主题</span><br></pre></td></tr></table></figure><p>git clone –depth 1 <a href="mailto:git@github.com">git@github.com</a>:iissnan/hexo-theme-next.git themes/next</p><p>```</p><p>其中themes/next表示下载到根目录的themes文件夹下，下载为next文件夹。</p><p>–depth 1 是下载最近一次更新</p><p>下载完成后打开_config.yml文件，将theme:xxx 改为下载的主题名</p><p>完成上述操作后需要进行博客三部曲重新发布一下博客</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建博客&quot;&gt;&lt;a href=&quot;#创建博客&quot; class=&quot;headerlink&quot; title=&quot;创建博客&quot;&gt;&lt;/a&gt;创建博客&lt;/h1&gt;&lt;h3 id=&quot;Hexo介绍&quot;&gt;&lt;a href=&quot;#Hexo介绍&quot; class=&quot;headerlink&quot; title=&quot;Hexo介
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>chushi</title>
    <link href="http://yoursite.com/2020/07/08/chushi/"/>
    <id>http://yoursite.com/2020/07/08/chushi/</id>
    <published>2020-07-08T11:26:56.000Z</published>
    <updated>2020-07-08T11:28:29.914Z</updated>
    
    <content type="html"><![CDATA[<p>安装本地hexo：npm install -g hexo-cli<br>git clone到本地：git clone -b dev 仓库地址 </p><p>需要进行之前章节的npm install hexo-deployer-git –save命令</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装本地hexo：npm install -g hexo-cli&lt;br&gt;git clone到本地：git clone -b dev 仓库地址 &lt;/p&gt;
&lt;p&gt;需要进行之前章节的npm install hexo-deployer-git –save命令&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/07/08/hello-world/"/>
    <id>http://yoursite.com/2020/07/08/hello-world/</id>
    <published>2020-07-08T10:48:53.907Z</published>
    <updated>2020-07-08T10:48:53.907Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
